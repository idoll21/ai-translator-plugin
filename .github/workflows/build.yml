name: Build and Package Plugin

on:
  push:
    branches:
      - main # Trigger this workflow on pushes to the main branch
  workflow_dispatch: # Allows manual triggering from GitHub Actions tab

jobs:
  build:
    runs-on: ubuntu-latest # Use a Linux environment for the build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Action to checkout your repository code

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2' # Specify the PHP version for Composer (match your XAMPP PHP version)
        extensions: mbstring, zip, dom, gd, curl, pdo_mysql # Common PHP extensions needed
        ini-values: post_max_size=256M, upload_max_filesize=256M, memory_limit=512M # Increase limits if needed

    - name: Install Composer dependencies (PHP)
      run: composer install --no-dev --optimize-autoloader # Install only production dependencies and optimize autoloader

    # Node.js/NPM steps for assets in the 'admin' directory
    - name: Check for admin/package.json and setup Node.js
      id: check_admin_package_json
      run: |
        if [ -f admin/package.json ]; then
          echo "ADMIN_PACKAGE_JSON_EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "ADMIN_PACKAGE_JSON_EXISTS=false" >> $GITHUB_OUTPUT
        fi
    - name: Set up Node.js
      if: steps.check_admin_package_json.outputs.ADMIN_PACKAGE_JSON_EXISTS == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Use a stable Node.js version (e.g., 20.x)

    - name: Install NPM dependencies and build assets in admin/
      if: steps.check_admin_package_json.outputs.ADMIN_PACKAGE_JSON_EXISTS == 'true'
      run: |
        npm install
        npm run build # Or whatever your build command is (e.g., 'npm run dev', 'npm run prod')
      working-directory: admin/ # IMPORTANT: Run NPM commands in the 'admin' directory

    - name: Create plugin zip file
      run: |
        PLUGIN_SLUG=$(basename ${{ github.repository }})
        ZIP_FILE_NAME="${PLUGIN_SLUG}.zip"
        TEMP_DIR="${{ github.workspace }}/package/${PLUGIN_SLUG}"

        mkdir -p "${TEMP_DIR}"

        # Copy core plugin files, excluding hidden git/github folders and generated folders
        rsync -av --exclude '.git/' --exclude '.github/' --exclude 'node_modules/' --exclude 'vendor/' ./ "${TEMP_DIR}/"

        # Copy Composer dependencies (vendor folder) if it exists
        if [ -d "vendor" ]; then
          rsync -av vendor/ "${TEMP_DIR}/vendor/"
        fi

        # Copy Admin assets (node_modules and build/dist) if they exist
        if [ -d "admin/node_modules" ]; then
          rsync -av admin/node_modules/ "${TEMP_DIR}/admin/node_modules/"
        fi
        if [ -d "admin/build" ]; then
          rsync -av admin/build/ "${TEMP_DIR}/admin/build/"
        fi
        if [ -d "admin/dist" ]; then
          rsync -av admin/dist/ "${TEMP_DIR}/admin/dist/"
        fi

        # Zip the package
        cd "${TEMP_DIR}/.."
        zip -r "${ZIP_FILE_NAME}" "${PLUGIN_SLUG}"
        ls -lh # List files to confirm zip size

    - name: Upload plugin artifact
      uses: actions/upload-artifact@v4
      with:
        name: ai-translator-plugin # Name of the artifact
        path: ${{ github.workspace }}/package/*.zip # Path to your generated zip file
        retention-days: 7 # How long to keep the artifact

    # Optional: Create a GitHub Release for easier download
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') # Only create release if a tag is pushed
      with:
        files: ${{ github.workspace }}/package/*.zip
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
